//Menu SAC custom widget Version 1.0.0. Copyright 2022 Arijit Das.
(function() {
    let template = document.createElement("template");
    template.innerHTML = `<div id="container"></div><style>* {margin: 0;padding: 0;box-sizing: border-box;}body {padding: 30px;font-family: "Helvetica Neue", helvetica, arial;background: url('https://subtlepatterns.com/patterns/white_carbonfiber.png');}#container {position: relative;width: 100%;}#container:after {content: "";display: block;clear: both;height: 0;}#menu {position: relative;float: left;width: 100%;padding: 0 20px;border-radius: 3px;box-shadow: inset 0 1px 1px rgba(255,255,255,.5), inset 0 -1px 0 rgba(0,0,0,.15), 0 1px 3px rgba(0,0,0,.15);background: #ccc;}#menu, #menu ul {list-style: none;}#menu > li {float: left;position: relative;border-right: 1px solid rgba(0,0,0,.1);box-shadow: 1px 0 0 rgba(255,255,255,.25);perspective: 1000px;}#menu > li:first-child {border-left: 1px solid rgba(255,255,255,.25);box-shadow: -1px 0 0 rgba(0,0,0,.1), 1px 0 0 rgba(255,255,255,.25);}#menu a {display: block;position: relative;z-index: 10;padding: 13px 20px 13px 20px;text-decoration: none;color: rgba(75,75,75,1);line-height: 1;font-weight: 600;font-size: 12px;letter-spacing: -.05em;background: transparent;text-shadow: 0 1px 1px rgba(255,255,255,.9);transition: all .25s ease-in-out;}#menu > li:hover > a {background: #333;color: rgba(0,223,252,1);text-shadow: none;}#menu li ul {position: absolute;left: 0;z-index: 1;width: 200px;padding: 0;opacity: 0;visibility: hidden;border-bottom-left-radius: 4px;border-bottom-right-radius: 4px;background: transparent;overflow: hidden;transform-origin: 50% 0%;}#menu li:hover ul {padding: 15px 0;background: #333;opacity: 1;visibility: visible;box-shadow: 1px 1px 7px rgba(0,0,0,.5);animation-name: swingdown;animation-duration: 1s;animation-timing-function: ease;}@keyframes swingdown {0% {opacity: .99999;transform: rotateX(90deg);}30% {transform: rotateX(-20deg) rotateY(5deg);animation-timing-function: ease-in-out;}65% {transform: rotateX(20deg) rotateY(-3deg);animation-timing-function: ease-in-out;}100% {transform: rotateX(0);animation-timing-function: ease-in-out;}}#menu li li a {padding-left: 15px;font-weight: 400;color: #ddd;text-shadow: none;border-top: dotted 1px transparent;border-bottom: dotted 1px transparent;transition: all .15s linear;}#menu li li a:hover {color: rgba(0,223,252,1);border-top: dotted 1px rgba(255,255,255,.15);border-bottom: dotted 1px rgba(255,255,255,.15);background: rgba(0,223,252,.02);}.noData{text-align:center;width:100%;}.groupHeader{color: #ddd;text-shadow: none;padding-bottom: 10px;text-align: left;padding-left: 15px;font-size: 12px;text-transform: uppercase;opacity: 0.5;}</style>`;
    class MENU extends HTMLElement {
        constructor() {
            super();
            let shadowRoot = this.attachShadow({
                mode: "open"
            });
            shadowRoot.appendChild(template.content.cloneNode(true));
            this._props = this.menuDefaultSettings();
            this._init = true;
            this._firstUpdate = true;
            this._firstResize = true;
            this._selectionEvent = false;
        }
        onCustomWidgetBeforeUpdate(changedProperties) {}
        onCustomWidgetAfterUpdate(changedProperties) {
            var shadow = this.shadowRoot;
            
            if ("selectedLabel" in changedProperties) {
            	this._props.selectedLabel = changedProperties["selectedLabel"];
                this._selectionEvent = true;
            }
            if ("selectedKey" in changedProperties) {
                this._props.selectedKey = changedProperties["selectedKey"];
                this._selectionEvent = true;
            }
            if ("data" in changedProperties) {
                this.$data = changedProperties["data"];
                this._selectionEvent = false;
            }
            let LoadLibsAfterUpdate = async function(host, data, props) {
                try {
                	await host.loadScript("https://d3js.org/d3.v4.min.js", shadow);
                	await host.loadScript("https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            if (!(this._init || this._selectionEvent)) {
                if (this._firstUpdate) {
                    LoadLibsAfterUpdate(this, this.$data, this._props);
                    this._firstUpdate = false;
                } else {
                    this.drawChart(this.$data, this._props);
                }
            }
        }
        onCustomWidgetResize(width, height) {
            var shadow = this.shadowRoot;
            this.$width = width + 'px';
            this.$height = height + 'px';
            let LoadLibsAfterResize = async function(host, data, props) {
                try {
                	await host.loadScript("https://d3js.org/d3.v4.min.js", shadow);
                	await host.loadScript("https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            if (this._firstResize) {
                LoadLibsAfterResize(this, this.$data, this._props);
                this._firstResize = false;
            } else {
                this.drawChart(this.$data, this._props);
            }
        }
        connectedCallback() {
            var shadow = this.shadowRoot;
            var custelem = shadow.host;
            this.$width = custelem.parentNode.parentNode.parentNode.style.width;
            this.$height = custelem.parentNode.parentNode.parentNode.style.height;
            let LoadLibs = async function(host, data, props) {
                try {
                	await host.loadScript("https://d3js.org/d3.v4.min.js", shadow);
                	await host.loadScript("https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.15/lodash.min.js", shadow);
                } catch (e) {
                    console.log(JSON.stringify(e));
                } finally {
                    host.drawChart(data, props);
                }
            };
            LoadLibs(this, this.$data, this._props);
            this._init = false;
        }
        disconnectedCallback() {}
        
        drawChart(_menudata, config) {
            config.menudata = config.menudata + "";
        	var r = this.shadowRoot;
            var _div = r.querySelector('div');
            _div.style.width = this.$width - 10;
            _div.style.height = this.$height;
            _div.innerHTML = '';
            
            var menu = this.drawMenu(_menudata, config, this.shadowRoot, this);
        }
        
        loadScript(src, shadowRoot) {
            return new Promise(function(resolve, reject) {
                let script = document.createElement('script');
                script.src = src;
                script.onload = () => {
                    console.log("Load: " + src);
                    resolve(script);
                };
                script.onerror = () => reject(new Error(`Script load error for ${src}`));
                shadowRoot.appendChild(script);
            });
        }
        
        menuDefaultSettings() {
            return {
                leftMargin: 10,
                topMargin: 10,
                rightMargin: 10,
                bottomMargin: 10,                
                data: [],
                selectedLabel: undefined,
                selectedKey: undefined
            };
        }
        drawMenu(dataJSON, config, root, eventDispatcher) {
            var _div = d3.select(root.querySelector('div'));
            if (config == null) config = menuDefaultSettings();
            try {
                config.data = JSON.parse(dataJSON);
            } catch (e) {
            	_div.append('div').attr('class', 'noData').append('p').text('No data to display.');
                return this;
            }
            if (dataJSON == '' || dataJSON == '""' || dataJSON == "''" || dataJSON == '[]' || dataJSON == '{}' || dataJSON == null || dataJSON == undefined) {
            	_div.append('div').attr('class', 'noData').append('p').text('No data to display.');
                return this;
            }
            
            var _d = config.data;
            var _menuL0 = _div.append("ul").attr("id", "menu");
        	
        	for(var i=0; i<_d.length; i++){
        		const node = _menuL0.append('li');
        		const anchornode = node.append('a').attr("id", _d[i].id).style('cursor', 'pointer');
        		anchornode.text(_d[i].label);        		
        		
        		anchornode.on('click', function (){
        			const _id = d3.select(this).attr('id');
        			const _text = d3.select(this).text();
        			updateSelection(_text, _id);
        		});
        		
        		const _submenu = _d[i].value;
        		if(_submenu != undefined){ // node has subnode
        			var slist = node.append("ul");	
        			var grouplist = _.uniq(_.map(_submenu, 'group'));
        			
        			if(grouplist[0] != undefined){ // grouped submenu
        				slist.style('width', 200*grouplist.length+'px');
        				var groups = _.groupBy(_submenu, function(d){return d.group;});
        				const table = slist.append('table').attr('class', 'groupedSubmenu').style('width', '100%');
        				const headernode = table.append('thead').append('tr');
        				const bodynode = table.append('tbody').append('tr');
        				
        				for(var g=0; g<grouplist.length; g++){
        					headernode.append('th').text(grouplist[g]).attr('class', 'groupHeader');
        					const gc = bodynode.append('td').attr('class', 'groupColumn')
        						.style('width',Math.floor(100/grouplist.length)+'%')
        						.style('vertical-align', 'top');
        					const grpitems = _.pick(groups, grouplist[g])[grouplist[g]];
        					for(var gi=0; gi<grpitems.length; gi++){
        						const snode = gc.append('li');
        						const sanchornode = snode.append("a").attr("id", grpitems[gi].id)
        							.style('padding-top', '5px')
        							.style('padding-bottom', '5px')
        							.style('cursor', 'pointer');

        	    				sanchornode.text(grpitems[gi].label);

        	    				sanchornode.on('click', function (){
        	    					const _id = d3.select(this).attr('id');
                        			const _text = d3.select(this).text();
                        			updateSelection(_text, _id);
        	    				});
        					};
        				};
        			} else{ // normal submenu
        				for(var j=0; j<_submenu.length; j++){
            				const snode = slist.append("li");
            				const sanchornode = snode.append("a").attr("id", _submenu[j].id)
        	    				.style('padding-top', '5px')
        						.style('padding-bottom', '5px')
        						.style('cursor', 'pointer');

            				sanchornode.text(_submenu[j].label);

            				sanchornode.on('click', function (){
            					const _id = d3.select(this).attr('id');
                    			const _text = d3.select(this).text();
                    			updateSelection(_text, _id);
            				});
            			};
        			};        			
        		};
        	}
            
            function updateSelection (label, id){
        		config.selectedLabel = label;
        		config.selectedKey = id;
        		eventDispatcher.dispatchEvent(new CustomEvent("propertiesChanged", {
                    detail: {
                        properties: {
                            selectedLabel: config.selectedLabel,
                            selectedKey: config.selectedKey
                        }
                    }
                }));
                var event = new Event("onSelect");
                eventDispatcher.dispatchEvent(event);
        	}
            
            return this;
        };
    }
    customElements.define("com-gmail-cse-ari007-menu", MENU);
})();